
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b28  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd0  08000cd0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cd0  08000cd0  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd0  08000cd0  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd0  08000cd0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd0  08000cd0  00010cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08000cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          00000028  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012d0  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004bc  00000000  00000000  00021338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  000217f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  00021958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002886  00000000  00000000  00021a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001834  00000000  00000000  00024306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a48c  00000000  00000000  00025b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002ffc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004d8  00000000  00000000  00030018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000038 	.word	0x20000038
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000cb8 	.word	0x08000cb8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	08000cb8 	.word	0x08000cb8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#include<stdio.h>
#include<string.h>
#include "stm32f407xx.h"

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<500000/2;i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>

}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <I2C1_GPIOInits>:
 * PB9 - SDA
 *
 *
 */
void I2C1_GPIOInits(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <I2C1_GPIOInits+0x40>)
 800022c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000232:	2301      	movs	r3, #1
 8000234:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000236:	2301      	movs	r3, #1
 8000238:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4; //AF4
 800023a:	2304      	movs	r3, #4
 800023c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]

	// configuring the pin details

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000242:	2306      	movs	r3, #6
 8000244:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f919 	bl	8000480 <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800024e:	2307      	movs	r3, #7
 8000250:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f913 	bl	8000480 <GPIO_Init>

}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40020400 	.word	0x40020400

08000268 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <I2C1_Inits+0x2c>)
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <I2C1_Inits+0x30>)
 8000270:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <I2C1_Inits+0x2c>)
 8000274:	2201      	movs	r2, #1
 8000276:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR; // useful only if board is acting as slave
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <I2C1_Inits+0x2c>)
 800027a:	2261      	movs	r2, #97	; 0x61
 800027c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <I2C1_Inits+0x2c>)
 8000280:	2200      	movs	r2, #0
 8000282:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <I2C1_Inits+0x2c>)
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <I2C1_Inits+0x34>)
 8000288:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C1Handle);
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <I2C1_Inits+0x2c>)
 800028c:	f000 fbaa 	bl	80009e4 <I2C_Init>

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000054 	.word	0x20000054
 8000298:	40005400 	.word	0x40005400
 800029c:	000186a0 	.word	0x000186a0

080002a0 <GPIO_Btn_Init>:


void GPIO_Btn_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;
	GpioBtn.pGPIOx = GPIOA;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <GPIO_Btn_Init+0x2c>)
 80002a8:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ae:	2300      	movs	r3, #0
 80002b0:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b2:	2302      	movs	r3, #2
 80002b4:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]



	GPIO_Init(&GpioBtn);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f8df 	bl	8000480 <GPIO_Init>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40020000 	.word	0x40020000

080002d0 <main>:


int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	GPIO_Btn_Init();
 80002d4:	f7ff ffe4 	bl	80002a0 <GPIO_Btn_Init>

	//I2C_pin inits
	I2C1_GPIOInits();
 80002d8:	f7ff ffa4 	bl	8000224 <I2C1_GPIOInits>

	//I2C peripheral inits
	I2C1_Inits();
 80002dc:	f7ff ffc4 	bl	8000268 <I2C1_Inits>

	I2C_PeripheralControl(I2C1, ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	480b      	ldr	r0, [pc, #44]	; (8000310 <main+0x40>)
 80002e4:	f000 fca8 	bl	8000c38 <I2C_PeripheralControl>

	// send some data to the slave
	while(1)
	{
	while(!(GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0)));
 80002e8:	bf00      	nop
 80002ea:	2100      	movs	r1, #0
 80002ec:	4809      	ldr	r0, [pc, #36]	; (8000314 <main+0x44>)
 80002ee:	f000 fa63 	bl	80007b8 <GPIO_ReadFromInputPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <main+0x1a>

	delay();
 80002f8:	f7ff ff7e 	bl	80001f8 <delay>

	I2C_MasterSendData(&I2C1Handle, some_data,strlen((char*)some_data),SLAVE_ADDR);
 80002fc:	4806      	ldr	r0, [pc, #24]	; (8000318 <main+0x48>)
 80002fe:	f7ff ff73 	bl	80001e8 <strlen>
 8000302:	4602      	mov	r2, r0
 8000304:	2368      	movs	r3, #104	; 0x68
 8000306:	4904      	ldr	r1, [pc, #16]	; (8000318 <main+0x48>)
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <main+0x4c>)
 800030a:	f000 fc33 	bl	8000b74 <I2C_MasterSendData>
	while(!(GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0)));
 800030e:	e7eb      	b.n	80002e8 <main+0x18>
 8000310:	40005400 	.word	0x40005400
 8000314:	40020000 	.word	0x40020000
 8000318:	20000000 	.word	0x20000000
 800031c:	20000054 	.word	0x20000054

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 fc8f 	bl	8000c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ffbd 	bl	80002d0 <main>

08000356 <LoopForever>:

LoopForever:
  b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000364:	08000cd8 	.word	0x08000cd8
  ldr r2, =_sbss
 8000368:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 800036c:	20000060 	.word	0x20000060

08000370 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d161      	bne.n	800044a <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a33      	ldr	r2, [pc, #204]	; (8000458 <GPIO_PeriClockControl+0xe4>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800038e:	4b33      	ldr	r3, [pc, #204]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a32      	ldr	r2, [pc, #200]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800039a:	e056      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a30      	ldr	r2, [pc, #192]	; (8000460 <GPIO_PeriClockControl+0xec>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a2c      	ldr	r2, [pc, #176]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e04b      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a2b      	ldr	r2, [pc, #172]	; (8000464 <GPIO_PeriClockControl+0xf0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ba:	4b28      	ldr	r3, [pc, #160]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a27      	ldr	r2, [pc, #156]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e040      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a27      	ldr	r2, [pc, #156]	; (8000468 <GPIO_PeriClockControl+0xf4>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003d0:	4b22      	ldr	r3, [pc, #136]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a21      	ldr	r2, [pc, #132]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e035      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a22      	ldr	r2, [pc, #136]	; (800046c <GPIO_PeriClockControl+0xf8>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003e6:	4b1d      	ldr	r3, [pc, #116]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003ec:	f043 0310 	orr.w	r3, r3, #16
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e02a      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <GPIO_PeriClockControl+0xfc>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <GPIO_PeriClockControl+0xe8>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a16      	ldr	r2, [pc, #88]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e01f      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a19      	ldr	r2, [pc, #100]	; (8000474 <GPIO_PeriClockControl+0x100>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e014      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <GPIO_PeriClockControl+0x104>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <GPIO_PeriClockControl+0xe8>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <GPIO_PeriClockControl+0xe8>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e009      	b.n	800044a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <GPIO_PeriClockControl+0x108>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d105      	bne.n	800044a <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a06      	ldr	r2, [pc, #24]	; (800045c <GPIO_PeriClockControl+0xe8>)
 8000444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40020000 	.word	0x40020000
 800045c:	40023800 	.word	0x40023800
 8000460:	40020400 	.word	0x40020400
 8000464:	40020800 	.word	0x40020800
 8000468:	40020c00 	.word	0x40020c00
 800046c:	40021000 	.word	0x40021000
 8000470:	40021400 	.word	0x40021400
 8000474:	40021800 	.word	0x40021800
 8000478:	40021c00 	.word	0x40021c00
 800047c:	40022000 	.word	0x40022000

08000480 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2101      	movs	r1, #1
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff6e 	bl	8000374 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	2b03      	cmp	r3, #3
 800049e:	d820      	bhi.n	80004e2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	fa02 f303 	lsl.w	r3, r2, r3
 80004b0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	2103      	movs	r1, #3
 80004c0:	fa01 f303 	lsl.w	r3, r1, r3
 80004c4:	43db      	mvns	r3, r3
 80004c6:	4619      	mov	r1, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	400a      	ands	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	430a      	orrs	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	e0cb      	b.n	800067a <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	795b      	ldrb	r3, [r3, #5]
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	d117      	bne.n	800051a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ea:	4b4b      	ldr	r3, [pc, #300]	; (8000618 <GPIO_Init+0x198>)
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7912      	ldrb	r2, [r2, #4]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a47      	ldr	r2, [pc, #284]	; (8000618 <GPIO_Init+0x198>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000500:	4b45      	ldr	r3, [pc, #276]	; (8000618 <GPIO_Init+0x198>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a41      	ldr	r2, [pc, #260]	; (8000618 <GPIO_Init+0x198>)
 8000514:	400b      	ands	r3, r1
 8000516:	6093      	str	r3, [r2, #8]
 8000518:	e035      	b.n	8000586 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	795b      	ldrb	r3, [r3, #5]
 800051e:	2b05      	cmp	r3, #5
 8000520:	d117      	bne.n	8000552 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000522:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <GPIO_Init+0x198>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	7912      	ldrb	r2, [r2, #4]
 800052a:	4611      	mov	r1, r2
 800052c:	2201      	movs	r2, #1
 800052e:	408a      	lsls	r2, r1
 8000530:	4611      	mov	r1, r2
 8000532:	4a39      	ldr	r2, [pc, #228]	; (8000618 <GPIO_Init+0x198>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	4b37      	ldr	r3, [pc, #220]	; (8000618 <GPIO_Init+0x198>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	43d2      	mvns	r2, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4a33      	ldr	r2, [pc, #204]	; (8000618 <GPIO_Init+0x198>)
 800054c:	400b      	ands	r3, r1
 800054e:	60d3      	str	r3, [r2, #12]
 8000550:	e019      	b.n	8000586 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	2b06      	cmp	r3, #6
 8000558:	d115      	bne.n	8000586 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <GPIO_Init+0x198>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	7912      	ldrb	r2, [r2, #4]
 8000562:	4611      	mov	r1, r2
 8000564:	2201      	movs	r2, #1
 8000566:	408a      	lsls	r2, r1
 8000568:	4611      	mov	r1, r2
 800056a:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <GPIO_Init+0x198>)
 800056c:	430b      	orrs	r3, r1
 800056e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	4b29      	ldr	r3, [pc, #164]	; (8000618 <GPIO_Init+0x198>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a25      	ldr	r2, [pc, #148]	; (8000618 <GPIO_Init+0x198>)
 8000582:	430b      	orrs	r3, r1
 8000584:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	089b      	lsrs	r3, r3, #2
 800058c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	f003 0303 	and.w	r3, r3, #3
 8000596:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a1f      	ldr	r2, [pc, #124]	; (800061c <GPIO_Init+0x19c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d04e      	beq.n	8000640 <GPIO_Init+0x1c0>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <GPIO_Init+0x1a0>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d032      	beq.n	8000612 <GPIO_Init+0x192>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <GPIO_Init+0x1a4>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d02b      	beq.n	800060e <GPIO_Init+0x18e>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <GPIO_Init+0x1a8>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d024      	beq.n	800060a <GPIO_Init+0x18a>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a19      	ldr	r2, [pc, #100]	; (800062c <GPIO_Init+0x1ac>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d01d      	beq.n	8000606 <GPIO_Init+0x186>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <GPIO_Init+0x1b0>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d016      	beq.n	8000602 <GPIO_Init+0x182>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <GPIO_Init+0x1b4>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d00f      	beq.n	80005fe <GPIO_Init+0x17e>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a15      	ldr	r2, [pc, #84]	; (8000638 <GPIO_Init+0x1b8>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d008      	beq.n	80005fa <GPIO_Init+0x17a>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a13      	ldr	r2, [pc, #76]	; (800063c <GPIO_Init+0x1bc>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d101      	bne.n	80005f6 <GPIO_Init+0x176>
 80005f2:	2308      	movs	r3, #8
 80005f4:	e025      	b.n	8000642 <GPIO_Init+0x1c2>
 80005f6:	2300      	movs	r3, #0
 80005f8:	e023      	b.n	8000642 <GPIO_Init+0x1c2>
 80005fa:	2307      	movs	r3, #7
 80005fc:	e021      	b.n	8000642 <GPIO_Init+0x1c2>
 80005fe:	2306      	movs	r3, #6
 8000600:	e01f      	b.n	8000642 <GPIO_Init+0x1c2>
 8000602:	2305      	movs	r3, #5
 8000604:	e01d      	b.n	8000642 <GPIO_Init+0x1c2>
 8000606:	2304      	movs	r3, #4
 8000608:	e01b      	b.n	8000642 <GPIO_Init+0x1c2>
 800060a:	2303      	movs	r3, #3
 800060c:	e019      	b.n	8000642 <GPIO_Init+0x1c2>
 800060e:	2302      	movs	r3, #2
 8000610:	e017      	b.n	8000642 <GPIO_Init+0x1c2>
 8000612:	2301      	movs	r3, #1
 8000614:	e015      	b.n	8000642 <GPIO_Init+0x1c2>
 8000616:	bf00      	nop
 8000618:	40013c00 	.word	0x40013c00
 800061c:	40020000 	.word	0x40020000
 8000620:	40020400 	.word	0x40020400
 8000624:	40020800 	.word	0x40020800
 8000628:	40020c00 	.word	0x40020c00
 800062c:	40021000 	.word	0x40021000
 8000630:	40021400 	.word	0x40021400
 8000634:	40021800 	.word	0x40021800
 8000638:	40021c00 	.word	0x40021c00
 800063c:	40022000 	.word	0x40022000
 8000640:	2300      	movs	r3, #0
 8000642:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000644:	4b59      	ldr	r3, [pc, #356]	; (80007ac <GPIO_Init+0x32c>)
 8000646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000648:	4a58      	ldr	r2, [pc, #352]	; (80007ac <GPIO_Init+0x32c>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000650:	7c7a      	ldrb	r2, [r7, #17]
 8000652:	7cbb      	ldrb	r3, [r7, #18]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	fa02 f103 	lsl.w	r1, r2, r3
 800065a:	4a55      	ldr	r2, [pc, #340]	; (80007b0 <GPIO_Init+0x330>)
 800065c:	7cfb      	ldrb	r3, [r7, #19]
 800065e:	3302      	adds	r3, #2
 8000660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000664:	4b53      	ldr	r3, [pc, #332]	; (80007b4 <GPIO_Init+0x334>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	7912      	ldrb	r2, [r2, #4]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	4611      	mov	r1, r2
 8000674:	4a4f      	ldr	r2, [pc, #316]	; (80007b4 <GPIO_Init+0x334>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	799b      	ldrb	r3, [r3, #6]
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	2103      	movs	r1, #3
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	43db      	mvns	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	400a      	ands	r2, r1
 80006a8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6899      	ldr	r1, [r3, #8]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	430a      	orrs	r2, r1
 80006b8:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	79db      	ldrb	r3, [r3, #7]
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	2103      	movs	r1, #3
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	400a      	ands	r2, r1
 80006e8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68d9      	ldr	r1, [r3, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7a1b      	ldrb	r3, [r3, #8]
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	4619      	mov	r1, r3
 8000716:	2301      	movs	r3, #1
 8000718:	408b      	lsls	r3, r1
 800071a:	43db      	mvns	r3, r3
 800071c:	4619      	mov	r1, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	400a      	ands	r2, r1
 8000724:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6859      	ldr	r1, [r3, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	430a      	orrs	r2, r1
 8000734:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	2b02      	cmp	r3, #2
 800073c:	d131      	bne.n	80007a2 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	7c3a      	ldrb	r2, [r7, #16]
 8000756:	3208      	adds	r2, #8
 8000758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	220f      	movs	r2, #15
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43db      	mvns	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7c3a      	ldrb	r2, [r7, #16]
 8000770:	4001      	ands	r1, r0
 8000772:	3208      	adds	r2, #8
 8000774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	7c3a      	ldrb	r2, [r7, #16]
 800077e:	3208      	adds	r2, #8
 8000780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a5b      	ldrb	r3, [r3, #9]
 8000788:	461a      	mov	r2, r3
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	7c3a      	ldrb	r2, [r7, #16]
 800079a:	4301      	orrs	r1, r0
 800079c:	3208      	adds	r2, #8
 800079e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40013800 	.word	0x40013800
 80007b4:	40013c00 	.word	0x40013c00

080007b8 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	691a      	ldr	r2, [r3, #16]
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	fa22 f303 	lsr.w	r3, r2, r3
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]

   return value;
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <I2C_ExecuteAddressPhase>:
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[4] = {2,4,8,16};

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;  // making space for the r/nw bit
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	70fb      	strb	r3, [r7, #3]
	//clear the 0th bit of SlaveAddr, the lsb bit 0 will correspond to write
	SlaveAddr &= ~(1);
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	f023 0301 	bic.w	r3, r3, #1
 80007fc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80007fe:	78fa      	ldrb	r2, [r7, #3]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	611a      	str	r2, [r3, #16]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <I2C_GenerateStartCondition>:

// helper function which is private to the C file
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	601a      	str	r2, [r3, #0]

}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint32_t dummyread = pI2Cx->SR1;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	60fb      	str	r3, [r7, #12]
	dummyread = pI2Cx->SR2;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	60fb      	str	r3, [r7, #12]
	(void)dummyread; // to avoid throwing unused variable error


}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <RCC_GetPLLOutputClk>:



uint32_t RCC_GetPLLOutputClk(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
 return 0;
 8000874:	2300      	movs	r3, #0

}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <I2C_PeriClockControl>:


void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d120      	bne.n	80008d4 <I2C_PeriClockControl+0x54>
			{
				if(pI2Cx == I2C1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a22      	ldr	r2, [pc, #136]	; (8000920 <I2C_PeriClockControl+0xa0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d106      	bne.n	80008a8 <I2C_PeriClockControl+0x28>
				{
					I2C1_PCLK_EN();
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <I2C_PeriClockControl+0xa4>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a21      	ldr	r2, [pc, #132]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
						}else if(pI2Cx == I2C3)
						{
							I2C3_PCLK_EN();
						}
			}
}
 80008a6:	e035      	b.n	8000914 <I2C_PeriClockControl+0x94>
				}else if(pI2Cx == I2C2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <I2C_PeriClockControl+0xa8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <I2C_PeriClockControl+0x3e>
					I2C2_PCLK_EN();
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008bc:	e02a      	b.n	8000914 <I2C_PeriClockControl+0x94>
				}else if(pI2Cx == I2C3)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a1a      	ldr	r2, [pc, #104]	; (800092c <I2C_PeriClockControl+0xac>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d126      	bne.n	8000914 <I2C_PeriClockControl+0x94>
					I2C3_PCLK_EN();
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008d2:	e01f      	b.n	8000914 <I2C_PeriClockControl+0x94>
				if(pI2Cx == I2C1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <I2C_PeriClockControl+0xa0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d106      	bne.n	80008ea <I2C_PeriClockControl+0x6a>
					I2C1_PCLK_EN();
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a10      	ldr	r2, [pc, #64]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008e8:	e014      	b.n	8000914 <I2C_PeriClockControl+0x94>
						}else if(pI2Cx == I2C2)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <I2C_PeriClockControl+0xa8>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d106      	bne.n	8000900 <I2C_PeriClockControl+0x80>
							I2C2_PCLK_EN();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <I2C_PeriClockControl+0xa4>)
 80008f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008fe:	e009      	b.n	8000914 <I2C_PeriClockControl+0x94>
						}else if(pI2Cx == I2C3)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <I2C_PeriClockControl+0xac>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d105      	bne.n	8000914 <I2C_PeriClockControl+0x94>
							I2C3_PCLK_EN();
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <I2C_PeriClockControl+0xa4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <I2C_PeriClockControl+0xa4>)
 800090e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40005400 	.word	0x40005400
 8000924:	40023800 	.word	0x40023800
 8000928:	40005800 	.word	0x40005800
 800092c:	40005c00 	.word	0x40005c00

08000930 <RCC_GetPCLK1Value>:
/*
 * Getting the frequency of PCLK
 */

uint32_t RCC_GetPCLK1Value(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	// finding the value of the bit 3:2 in the CCR register
	// to find which clock source i sbeing used

	uint8_t clksrc,temp, ahbp, apb1p;
	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <RCC_GetPCLK1Value+0xa0>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000944:	7a7b      	ldrb	r3, [r7, #9]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <RCC_GetPCLK1Value+0xa4>)
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e00b      	b.n	8000968 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000950:	7a7b      	ldrb	r3, [r7, #9]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d102      	bne.n	800095c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <RCC_GetPCLK1Value+0xa8>)
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	e005      	b.n	8000968 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc ==2)
 800095c:	7a7b      	ldrb	r3, [r7, #9]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d102      	bne.n	8000968 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClk();
 8000962:	f7ff ff85 	bl	8000870 <RCC_GetPLLOutputClk>
 8000966:	60f8      	str	r0, [r7, #12]
	}

	// to find out the AHB1 PreScaler
	temp = (RCC->CFGR >> 4) & 0xF;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <RCC_GetPCLK1Value+0xa0>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	091b      	lsrs	r3, r3, #4
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	723b      	strb	r3, [r7, #8]

	if( temp < 8 )
 8000976:	7a3b      	ldrb	r3, [r7, #8]
 8000978:	2b07      	cmp	r3, #7
 800097a:	d802      	bhi.n	8000982 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	72fb      	strb	r3, [r7, #11]
 8000980:	e005      	b.n	800098e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp - 8];
 8000982:	7a3b      	ldrb	r3, [r7, #8]
 8000984:	3b08      	subs	r3, #8
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <RCC_GetPCLK1Value+0xac>)
 8000988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098c:	72fb      	strb	r3, [r7, #11]
	}

    // to find out the APB1 prescaler
	temp = (RCC->CFGR >> 10) & 0x7;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <RCC_GetPCLK1Value+0xa0>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	0a9b      	lsrs	r3, r3, #10
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	723b      	strb	r3, [r7, #8]

	if( temp < 4 )
 800099c:	7a3b      	ldrb	r3, [r7, #8]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d802      	bhi.n	80009a8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	72bb      	strb	r3, [r7, #10]
 80009a6:	e005      	b.n	80009b4 <RCC_GetPCLK1Value+0x84>
	}else
	{
		apb1p = APB1_PreScaler[temp - 4];
 80009a8:	7a3b      	ldrb	r3, [r7, #8]
 80009aa:	3b04      	subs	r3, #4
 80009ac:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <RCC_GetPCLK1Value+0xb0>)
 80009ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b2:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ((SystemClk/ ahbp) / apb1p );
 80009b4:	7afb      	ldrb	r3, [r7, #11]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80009bc:	7abb      	ldrb	r3, [r7, #10]
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	607b      	str	r3, [r7, #4]


	return pclk1;
 80009c4:	687b      	ldr	r3, [r7, #4]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	00f42400 	.word	0x00f42400
 80009d8:	007a1200 	.word	0x007a1200
 80009dc:	20000020 	.word	0x20000020
 80009e0:	20000030 	.word	0x20000030

080009e4 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
	// enable the clk for the I2C peripheral

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff42 	bl	8000880 <I2C_PeriClockControl>
	// Ack ocntrol bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7a5b      	ldrb	r3, [r3, #9]
 8000a00:	029b      	lsls	r3, r3, #10
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	601a      	str	r2, [r3, #0]

	// initialising the freq field
	tempreg = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U; // dividing to get only the number in MHz
 8000a16:	f7ff ff8b 	bl	8000930 <RCC_GetPCLK1Value>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <I2C_Init+0x15c>)
 8000a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a22:	0c9b      	lsrs	r3, r3, #18
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = tempreg & 0x3F ;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a34:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7a1b      	ldrb	r3, [r3, #8]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	461a      	mov	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14 );
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg & 0x7F;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000a5a:	609a      	str	r2, [r3, #8]

	// CCR Calculations
	uint16_t ccr_value = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	817b      	strh	r3, [r7, #10]
	tempreg =0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a36      	ldr	r2, [pc, #216]	; (8000b44 <I2C_Init+0x160>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d80f      	bhi.n	8000a8e <I2C_Init+0xaa>
	{
		//standard mode
		ccr_value = RCC_GetPCLK1Value() / (2* pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000a6e:	f7ff ff5f 	bl	8000930 <RCC_GetPCLK1Value>
 8000a72:	4602      	mov	r2, r0
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	817b      	strh	r3, [r7, #10]
		tempreg |= ( ccr_value & 0xFFF);
 8000a80:	897b      	ldrh	r3, [r7, #10]
 8000a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e02d      	b.n	8000aea <I2C_Init+0x106>

	}else
	{
		//fast mode
		tempreg |= ( 1 << 15 );
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a94:	60fb      	str	r3, [r7, #12]
		tempreg |= ( pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	895b      	ldrh	r3, [r3, #10]
 8000a9a:	039b      	lsls	r3, r3, #14
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	895b      	ldrh	r3, [r3, #10]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10b      	bne.n	8000ac4 <I2C_Init+0xe0>
		{
			ccr_value = RCC_GetPCLK1Value() / (3* pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000aac:	f7ff ff40 	bl	8000930 <RCC_GetPCLK1Value>
 8000ab0:	4601      	mov	r1, r0
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ac0:	817b      	strh	r3, [r7, #10]
 8000ac2:	e00c      	b.n	8000ade <I2C_Init+0xfa>
		}else
		{
			ccr_value = RCC_GetPCLK1Value() / (25* pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000ac4:	f7ff ff34 	bl	8000930 <RCC_GetPCLK1Value>
 8000ac8:	4601      	mov	r1, r0
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009a      	lsls	r2, r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000adc:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ( ccr_value & 0xFFF);
 8000ade:	897b      	ldrh	r3, [r7, #10]
 8000ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	61da      	str	r2, [r3, #28]

	//TRISE Calculation
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <I2C_Init+0x160>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d809      	bhi.n	8000b10 <I2C_Init+0x12c>
	{
		//SM

		tempreg = (RCC_GetPCLK1Value()/1000000U) + 1; //1000ns is 1 us which is 1 MHz
 8000afc:	f7ff ff18 	bl	8000930 <RCC_GetPCLK1Value>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <I2C_Init+0x15c>)
 8000b04:	fba2 2303 	umull	r2, r3, r2, r3
 8000b08:	0c9b      	lsrs	r3, r3, #18
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e00d      	b.n	8000b2c <I2C_Init+0x148>

	}
	else{
		//FM
		tempreg = ((RCC_GetPCLK1Value()*300)/1000000000U)+1; // for FM 300 ns
 8000b10:	f7ff ff0e 	bl	8000930 <RCC_GetPCLK1Value>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	0a5b      	lsrs	r3, r3, #9
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <I2C_Init+0x164>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	09db      	lsrs	r3, r3, #7
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b36:	621a      	str	r2, [r3, #32]




}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	431bde83 	.word	0x431bde83
 8000b44:	000186a0 	.word	0x000186a0
 8000b48:	00044b83 	.word	0x00044b83

08000b4c <I2C_GetFlagStatus>:
 * Data Send and Receive
 */


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <I2C_MasterSendData>:


void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fe42 	bl	8000810 <I2C_GenerateStartCondition>

	//2. Confirm hat the START generation is completed by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)));
 8000b8c:	bf00      	nop
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2101      	movs	r1, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffd9 	bl	8000b4c <I2C_GetFlagStatus>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0f6      	beq.n	8000b8e <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) ( 8 bits )
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	78fa      	ldrb	r2, [r7, #3]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe1b 	bl	80007e4 <I2C_ExecuteAddressPhase>


	//4.Confirm that the address phase is completed by checking the ADDR flag in the SR1 register
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)));
 8000bae:	bf00      	nop
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ffc8 	bl	8000b4c <I2C_GetFlagStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f6      	beq.n	8000bb0 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to the software sequence
	//Note: until ADDR will be cleared SCL will be stretched
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe42 	bl	8000850 <I2C_ClearADDRFlag>

	//6. send the data until Len becomes 0
	while(Len!=0)
 8000bcc:	e014      	b.n	8000bf8 <I2C_MasterSendData+0x84>
	{
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)));
 8000bce:	bf00      	nop
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ffb8 	bl	8000b4c <I2C_GetFlagStatus>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f6      	beq.n	8000bd0 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
		Len--;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
	while(Len!=0)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1e7      	bne.n	8000bce <I2C_MasterSendData+0x5a>


	//7. when Len becomes 0 wait for the TXE=1, BTF=1 before generating the STOP condition
	// Note: TXE=1, BTF=1 means that both SR and DR is empty and next transmission should begin
	//when BTF=1, SCL will be stretched ( pulled to LOW )
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)));
 8000bfe:	bf00      	nop
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ffa0 	bl	8000b4c <I2C_GetFlagStatus>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f6      	beq.n	8000c00 <I2C_MasterSendData+0x8c>
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF)));
 8000c12:	bf00      	nop
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff96 	bl	8000b4c <I2C_GetFlagStatus>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f6      	beq.n	8000c14 <I2C_MasterSendData+0xa0>


	//8. Generate STOP condition and master need not wait for the completion of stop condition
	//Note: generating STOP automatically clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe00 	bl	8000830 <I2C_GenerateStopCondition>

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <I2C_PeripheralControl>:

/*
 * Other peripheral APIs
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d106      	bne.n	8000c58 <I2C_PeripheralControl+0x20>
		{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f043 0201 	orr.w	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
		{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
		}


}
 8000c56:	e005      	b.n	8000c64 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 0201 	bic.w	r2, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <__libc_init_array>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	4d0d      	ldr	r5, [pc, #52]	; (8000ca8 <__libc_init_array+0x38>)
 8000c74:	4c0d      	ldr	r4, [pc, #52]	; (8000cac <__libc_init_array+0x3c>)
 8000c76:	1b64      	subs	r4, r4, r5
 8000c78:	10a4      	asrs	r4, r4, #2
 8000c7a:	2600      	movs	r6, #0
 8000c7c:	42a6      	cmp	r6, r4
 8000c7e:	d109      	bne.n	8000c94 <__libc_init_array+0x24>
 8000c80:	4d0b      	ldr	r5, [pc, #44]	; (8000cb0 <__libc_init_array+0x40>)
 8000c82:	4c0c      	ldr	r4, [pc, #48]	; (8000cb4 <__libc_init_array+0x44>)
 8000c84:	f000 f818 	bl	8000cb8 <_init>
 8000c88:	1b64      	subs	r4, r4, r5
 8000c8a:	10a4      	asrs	r4, r4, #2
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	42a6      	cmp	r6, r4
 8000c90:	d105      	bne.n	8000c9e <__libc_init_array+0x2e>
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c98:	4798      	blx	r3
 8000c9a:	3601      	adds	r6, #1
 8000c9c:	e7ee      	b.n	8000c7c <__libc_init_array+0xc>
 8000c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca2:	4798      	blx	r3
 8000ca4:	3601      	adds	r6, #1
 8000ca6:	e7f2      	b.n	8000c8e <__libc_init_array+0x1e>
 8000ca8:	08000cd0 	.word	0x08000cd0
 8000cac:	08000cd0 	.word	0x08000cd0
 8000cb0:	08000cd0 	.word	0x08000cd0
 8000cb4:	08000cd4 	.word	0x08000cd4

08000cb8 <_init>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr

08000cc4 <_fini>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr
